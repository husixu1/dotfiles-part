global !p

# Original method is deprecated due to the update of vimtex 2.0
# (https://vi.stackexchange.com/questions/18490/ultisnips-context-and-tex)

# Use vimtex 2.0-provided function instead
if vim.eval('exists("*vimtex#syntax#in_mathzone")') == '1':
    def isMath():
        return True if vim.eval('vimtex#syntax#in_mathzone()') == '1' else False
else:
    def isMath():
        return False

# remove trailing space caused by symbol expansion, with post_jump hook
def remove_trailing_ws(snip):
    # skip initial jump
    prev_tabstop = snip.tabstop - snip.jump_direction
    if prev_tabstop == 0:
        return

    # get previous tabstop
    if snip.tabstop == 0:
        # if this jump is the last one, try find the biggest tabstop number
        tabstops = sorted(list(snip.tabstops.keys()))
        if tabstops[-1] == 0:
            return
        else:
           tabstop = snip.tabstops[tabstops[-1]]
    else:
        # otherwise just use the previous one, if exists
        if 0 < prev_tabstop and prev_tabstop < len(snip.tabstops) - 1:
            tabstop = snip.tabstops[prev_tabstop]
        else:
            return

    # remove trailing whitespaces before cursor
    left_len = len(snip.buffer[tabstop.end[0]][:tabstop.end[1]].rstrip())
    original_end = tabstop.end[1]
    snip.buffer[tabstop.end.line] = \
            snip.buffer[tabstop.end[0]][:left_len] + \
            snip.buffer[tabstop.end[0]][original_end:]

    # set correct cursor position
    snip.cursor.set(snip.line, snip.column - (original_end - left_len) + 1)


# see http://mirror.ctan.org/info/symbols/comprehensive/symbols-a4.pdf
symbolMap = {
# Greeks
'al': r'\alpha',    'Al': r'\Alpha',    'be': r'\beta',     'Be': r'\Beta',
'ga': r'\gamma',    'Ga': r'\Gamma',    'de': r'\delta',    'De': r'\Delta',
'ep': r'\epsilon',  'Ep': r'\Epsilon',  'ze': r'\zeta',     'Ze': r'\Zeta',
'et': r'\eta',      'Et': r'\Eta',      'th': r'\theta',    'Th': r'\Theta',
'io': r'\iota',     'Io': r'\Iota',     'ka': r'\kappa',    'Ka': r'\Kappa',
'la': r'\lambda',   'La': r'\Lambda',   'mu': r'\mu',       'Mu': r'\Mu',
'nu': r'\nu',       'Nu': r'\Nu',       'xi': r'\xi',       'Xi': r'\Xi',
'oc': r'\omicron',  'Oc': r'\Omicron',  'pi': r'\pi',       'Pi': r'\Pi',
'rh': r'\rho',      'Rh': r'\Rho',      'si': r'\sigma',    'Si': r'\Sigma',
'ta': r'\tau',      'Ta': r'\Tau',      'up': r'\upsilon',  'Up': r'\Upsilon',
'ph': r'\phi',      'Ph': r'\Phi',      'ch': r'\chi',      'Ch': r'\Chi',
'ps': r'\psi',      'Ps': r'\Psi',      'om': r'\omega',    'Om': r'\Omega',
# Archaic Greek
'di': r'\digamma',  'Di': r'Digamma',
# Relation Operators 1
'lt': r'<',                 'gt': r'>',
'le': r'\leq',              'ge': r'\geq',
'les': r'\leqslant',        'ges': r'\geqslant',
'nle': r'\nleq',            'nge': r'\ngeq',
'nles': r'\nleqslant',      'nges': r'\ngeqslant',
'prec': r'\prec',           'succ': r'\succ',
'nprec': r'\nprec',         'nsucc': r'\nsucc',
'prece': r'\preceq',        'succ': r'\succeq',
'nprece': r'\npreceq',      'nsucc': r'\nsucceq',
'll': r'\ll',               'gg': r'\gg',
'lll': r'\lll',             'ggg': r'\ggg',
'sub': r'\subset',          'sup': r'\supset',
'nsub': r'\not\subset',     'nsup': r'\not\supset',
'sube': r'\subseteq',       'supe': r'\supseteq',
'nsube': r'\not\subseteq',  'nsupe': r'\not\supseteq',
'sqsub': r'\sqsubset',      'sqsup': r'\sqsupset',
'sqsube': r'\sqsubseteq',   'sqsupe': r'\sqsupseteq',
# Relation Operators 2
'eq': r'=',                 'ne': r'\neq',
'doteq': r'\doteq',         'equiv': r'\equiv',
'appr': r'\approx',          'cong': r'\cong',
'simeq': r'\simeq',         'sim': r'\sim',
'prop': r'\propto',
# Relation Operators 3
'para': r'\|',              'npara': r'\nparallel',
'asymp': r'\asymp',         'bow': r'\bowtie',
'vdash': r'\vdash',         'dashv': r'\dashv',
'in': r'\in',               'ni': r'\ni',
'smile': r'\smile',         'frown': r'\frown',
'models': r'\models',       'nin': r'\notin',
'prep': r'\prep',           'mid': r'\mid',
# Binary operators
'pm': r'\pm',               'mp': r'\mp',
'tim': r'\times',           'div': r'\div',
'tim': r'\times',           'div': r'\div',
'ast': r'\ast',             'star': r'\star',
'dag': r'\dagger',          'ddag': r'\ddagger',
'cap': r'\cap',             'cup': r'\cup',
'sqcap': r'\sqcap',         'sqcup': r'\sqcup',
'vee': r'\vee',             'wed': r'\wedge',
'triu': r'\bigtriangleup',  'trid': r'\bigtriangledown',
'tril': r'\triangleleft',   'trir': r'\triangleright',
'bcric': r'\bigcric',       'bul': r'\bullet',
'wr': r'\wr',               'od': r'\odot',
'op': r'\oplus',            'om': r'\ominus',
'ot': r'\otimes',           'os': r'\oslash',
'circ': r'\circ',           'setm': r'\setminus',
'amalg': r'\amalg',
# TODO: negated binary relation
# TODO: logic notation
# TODO: geometry
# TODO: delimiters
# TODO: arrows
'to': r'\to',               'gets': r'\gets',
# TODO: other symbols
'par': r'\partial',         'eth': r'\eth',
'hbar': r'\hbar',           'el': r'\ell',
'im': r'\imath',            'jm': r'\jmath',
'Re': r'\Re',               'Im': r'\Im',
'wp': r'\wp',               'nab': r'\nabla',
'box': r'\box',             'infty': r'\infty',
# TODO: hebrew letters
# Log-like symbols
'sin': r'\sin',             'asin': r'\arcsin',
'cos': r'\cos',             'acos': r'\arccos',
'tan': r'\tan',             'atan': r'\arctan',
'csc': r'\csc',             'acsc': r'\arccsc',
'sec': r'\sec',             'asec': r'\arcsec',
'cot': r'\cot',             'acot': r'\arccot',
'sinh': r'\sinh',           'asinh': r'\arcsinh',
'cosh': r'\cosh',           'acosh': r'\arccosh',
'tanh': r'\tanh',           'atanh': r'\arctanh',
'csch': r'\csch',           'acsch': r'\arccsch',
'sech': r'\sech',           'asech': r'\arcsech',
'coth': r'\coth',           'acoth': r'\arccoth',
'min': r'\min',             'max': r'\max',
'lim': r'\lim',             'lims': r'\limsup',     'limi': r'\liminf',
'log': r'\log',             'lg': r'\lg',           'ln': r'\ln',
'deg': r'\deg',             'gcd': r'\gcd',
'exp': r'\exp',
'ker': r'\ker',
'pr': r'\Pr',
'sup': r'\sup',
'det': r'\det',
'hom': r'\hom',
'arg': r'\arg',
'dim': r'\dim',
'inf': r'\inf',
# dots
'cdot': r'\cdot',           'dots': r'\dots',
# 199: Letter-like Symbols
'all': r'\forall',          'vep': r'\varepsilon',
'bot': r'\bot',             'top': r'\top',

# TODO: complete this map and write a python program to generate snippets
# from this map, instead of using dynamic expansion (for the sake of ycm)
}

endglobal


# If the rest match failed, match symbol
priority -1

# symbols ===========================
# Append a space after the symbol to avoid connection with the subsequent
# character. But if subsequence character is also a symbol, we remove that space
context "isMath()"
snippet "\s*(;[a-zA-Z]+)" "symbol" ri
`!p snip.rv = symbolMap[match.group(1)[1:]] + ' ' if \
        match.group(1)[1:] in symbolMap else match.group(0)`
endsnippet
# For debugging
# `!p snip.rv = "-->" + match.group(0)` + "<--"

# Match the rest first
priority 0

# Start a math environment ##########
#####################################

# avoid expanding math environment recursively
context "not isMath()"
post_jump "remove_trailing_ws(snip)"
snippet mi "math inline" i
\(${1:${VISUAL}}\)$0
endsnippet

context "not isMath()"
snippet md "math display" i
\[
    ${1:${VISUAL}}
\]$0
endsnippet

context "not isMath()"
snippet eq "Equation" b
\begin{equation}
    $0
\end{equation}
endsnippet

context "not isMath()"
snippet eqnn "Equation without number" b
\begin{equation*}
    $0
\end{equation*}
endsnippet

context "not isMath()"
snippet eqa "Equation array" b
\begin{eqnarray}
    $1 & $2 & $0
\end{eqnarray}
endsnippet

context "not isMath()"
snippet eqann "Equation array without numbers" b
\begin{eqnarray*}
    $1 & $2 & $0
\end{eqnarray*}
endsnippet

# Inside Math Environment ###########
#####################################

# basic symbols autoexpand ==========
context "isMath()"
snippet "\s+([^a-zA-Z\d\s\(\[\{])" "symbol" rwA
`!p snip.rv = match.group(1)`
endsnippet

# sub and super script ==============
context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;b" "subscript (bottom)" ri
_{$1}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;t" "superscript (top)" ri
^{$1}$0
endsnippet

# pairs =============================
context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;r" "round rbrackets (...)" ri
(${1:${VISUAL}})$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;s" "squares rbrackets [...]" ri
[${1:${VISUAL}}]$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;c" "curly rbrackets {...}" ri
\\{${1:${VISUAL}}\\}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;a" "angle rbrackets ⟨...⟩" ri
\langle ${1:${VISUAL}}\rangle$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;p" "pipes r|...|" ri
|${1:${VISUAL}}|$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;ppara" "double rpipes ||...||" ri
\|${1:${VISUAL}}\|$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;lrr" "left( rright)" ri
\left(${1:${VISUAL}}\right)
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;lrs" "left[ rright]" ri
\left[${1:${VISUAL}}\right]
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;lrc"  "left\{ rright\}" ri
\left\\{${1:${VISUAL}}\right\\}
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;lra" "angle rbrackets ⟨...⟩" ri
\left\langle ${1:${VISUAL}}\right\rangle$0
endsnippet

context "isMath()"
snippet "\s*;lrp" "left| rright|" ri
\left|${1:${VISUAL}}\right|
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;lrpara" "left\| rright\|" ri
\left\\|${1:${VISUAL}}\right\\|
endsnippet

# TODO: add these snippets to the map, and make the braces and jumps after them an anonymous expasion
# functions =========================
context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*//" "Fraction" ri
\\frac{${1:${VISUAL}}}{$2}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;sum" "Sum" ri
\sum_{$1}^{$2} $0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;prod" "product" ri
\prod_{$1}^{$2} $0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;lim" "limits" ri
\lim_{$1} $0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;int" "integrals" ri
\int_{$1}^{$2} $0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;sq" "sqrt" ri
\sqrt[${1:2}]{$2}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;ub" "underbrace" ri
\underbrace{${1:${VISUAL}}}_{$2}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;ob" "overbrace" ri
\overbrace{${1:${VISUAL}}}^{$2}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;uset" "underset" ri
\underset{${1:${VISUAL}}}{$2}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;oset" "overbrace" ri
\overset{${1:${VISUAL}}}{$2}$0
endsnippet

# modifiers =========================
context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;bar" "bar" ri
\bar{${1:${VISUAL}}}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;hat" "hat" ri
\hat{${1:${VISUAL}}}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;vec" "vec" ri
\vec{${1:${VISUAL}}}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;rm" "mathrm" ri
\mathrm{${1:${VISUAL}}}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;bf" "mathrm" ri
\mathbf{${1:${VISUAL}}}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;tt" "mathrm" ri
\mathtt{${1:${VISUAL}}}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;bb" "mathbb" ri
\mathbb{${1:${VISUAL}}}$0
endsnippet

context "isMath()"
post_jump "remove_trailing_ws(snip)"
snippet "\s*;cal" "mathcal" ri
\mathcal{${1:${VISUAL}}}$0
endsnippet

# environments ======================
context "isMath()"
snippet ;mat "Smart Matrix" i
\begin{${1:p/b/v/V/B/small}matrix}
    $0
\end{$1matrix}
endsnippet

context "isMath()"
snippet "\s*;T" "text" ri
\text{${1:${VISUAL}}}$0
endsnippet

# vim: set expandtab:
