" Determine running environment
let b:system = 'unix'
if has('unix')
    if exists("$WSL_DISTRO_NAME")
        let b:system = 'wsl'
    else
        call system("command -v termux-setup-storage")
        if v:shell_error == 0
            let b:system = 'termux'
            let s:termux_prefix = '/data/data/com.termux/files/usr'
        endif
    endif
elseif has('win32')
    let b:system = 'windows'
endif

" source generated config file
let b:generated_config_file = $HOME . "/.vim/custom/bdm_config.vim"
if filereadable(b:generated_config_file)
    exe 'source' b:generated_config_file
endif

" default preset to 'desktop'. The preset should be set by bdm_config.vim
" acknowledged presets: desktop, server.
if !exists("g:preset")
    let g:preset = "desktop"
endif

set encoding=utf-8  " required for correctly displaying symbols
set rtp^=~/.vim " force '~/.vim'  on windows

" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" Vim Plugin Settings %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

" vim-plug settings %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" required
set nocompatible

let g:plug_threads = 8
let g:plug_timeout = 60
let g:plug_retries = 2
let g:plug_window = 'vertical topleft new'

" post-update hooks %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function! InstallFont(info)
    if a:info.status == 'installed' || a:info.status == 'updated' || a:info.force
        silent! !bash ./install.sh
    endif
endfunction this

function! UpdateCoc(info)
    if a:info.status == 'updated'
        CocUpdate
    endif
endfunction

" plugins %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
call plug#begin('~/.vim/plugged')

" prelude --------------------------------------------------------------------

Plug 'embear/vim-localvimrc'

" -------------------------------------------------------------------- prelude
" visual ---------------------------------------------------------------------

Plug 'ryanoasis/vim-devicons'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'
Plug 'idanarye/vim-merginal'

" conflicts with vista.vim, see issue #134
"Plug 'nathanaelkane/vim-indent-guides'
Plug 'husixu1/vim-indent-guides'

Plug 'kien/rainbow_parentheses.vim'
Plug 'severin-lemaignan/vim-minimap'
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'guns/xterm-color-table.vim'
Plug 'wellle/context.vim'

if g:preset == 'desktop'
    Plug 'powerline/fonts', { 'do': function('InstallFont') }
endif

" TODO: replace with coc-bookmark?
"Plug 'kshenoy/vim-signature'

" --------------------------------------------------------------------- visual
" functional------------------------------------------------------------------

Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
"Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'liuchengxu/vista.vim'
Plug 'yaroot/vissort'
Plug 'junegunn/vim-easy-align'

Plug 'sirver/ultisnips'
Plug 'honza/vim-snippets'
Plug 'husixu1/auto-pairs'

if g:preset == 'desktop'
    "Plug 'vim-syntastic/syntastic'

    " replaces syntastic
    Plug 'dense-analysis/ale'   "replaces syntastic

    "" needs manual compile if auto compile failed. requires compiledb
    "Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }
    "" only for clang-based Ycm, not clangd-based
    "Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

    " replaces YCM
    Plug 'neoclide/coc.nvim', {
                \ 'branch': 'release', 'do': function('UpdateCoc') }

    " fusion ultisnips, auto-pairs and coc.nvim
    Plug 'husixu1/vim-fusiontab'
endif

Plug 'haya14busa/incsearch.vim'
Plug 'easymotion/vim-easymotion'
Plug 'pseewald/vim-anyfold'

Plug 'farmergreg/vim-lastplace'
Plug 'mbbill/undotree'

Plug 'cohama/agit.vim'

Plug 'Chiel92/vim-autoformat'
Plug 'vim-scripts/DoxygenToolkit.vim', {
            \ 'for': 'c,cpp,python,javascript,java' }

" needs ack installed (pacman -S ack)
Plug 'dyng/ctrlsf.vim'

"" cause ycm jump bug
"Plug 'ronakg/quickr-preview.vim'

Plug 'vim-scripts/a.vim'

"" needs ctags
"Plug 'craigemery/vim-autotag'
" replace autotag, needs ctags
Plug 'ludovicchabant/vim-gutentags'

Plug 'alx741/vinfo'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
"Plug 'junegunn/fzf.vim'
" replaces fzf.vim, requires gtags (Gnu Global), python-pygments
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
Plug 'Yggdroot/LeaderF-marks'

" this plugin causes bug when used inside .pyenv/versions subdirectories
Plug 'lambdalisue/vim-pyenv', {'for': 'python,python3'}

" ----------------------------------------------------------------- functional
" language support -----------------------------------------------------------

"" polyglot causes conflict and harms performance. Use separate packages instead
"Plug 'sheerun/vim-polyglot'

" with c++11/14/17/20 highlight support
Plug 'bfrg/vim-cpp-modern', {'for': 'c,cpp'}
Plug 'pangloss/vim-javascript', {'for': 'javascript'}
Plug 'ternjs/tern_for_vim', {'for': 'javascript', 'do': 'npm install'}
Plug 'mxw/vim-jsx', {'for': 'javascript'}
Plug 'mtscout6/vim-tagbar-css', {'for': 'css'}
" needs php in $PATH
Plug 'lvht/tagbar-markdown', {'for': 'markdown'}
Plug 'lervag/vimtex', {'for': 'tex,latex'}
Plug 'KeitaNakamura/tex-conceal.vim', {'for': 'tex,latex'}
" shortcut conflict with coc.nvim
"Plug 'vim-scripts/bash-support.vim', { 'for': 'sh,bash' }
" needs npm install -g livedown
"Plug 'shime/vim-livedown', { 'for': 'markdown'}
" replaces vim-livedown, needs npm install -g instant-markdown-d
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
Plug 'neovimhaskell/haskell-vim', {'for': 'haskell'}
" natural language grammar checker
Plug 'rhysd/vim-grammarous'
Plug 'sukima/vim-tiddlywiki', {'for' : 'tiddlywiki'}
Plug 'dylon/vim-antlr', {'for' : 'antlr3,antlr4'}
" flex and bison highlight support
Plug 'justinmk/vim-syntax-extra', {'for': 'yacc,lex'}
Plug 'dag/vim-fish', {'for': 'fish'}
Plug 'wgwoods/vim-systemd-syntax', {'for': 'systemd'}

" ----------------------------------------------------------- language support
" required
call plug#end()
filetype plugin indent on

" NerdTree %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '‚ñ∏'
let g:NERDTreeDirArrowCollapsible = '‚ñæ'

" devices using termux usually have a small screen...
if b:system == 'termux'
    let g:NERDTreeWinSize = 21
else
    let g:NERDTreeWinSize = 31
endif

let g:nerdtree_tabs_open_on_gui_startup = 0
let g:nerdtree_tabs_open_on_console_startup = 0

" Vim NerdTree Syntax Highlight %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:NERDTreeLimitedSyntax = 1

" Coc.nvim %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" auto install extensions
let g:coc_global_extensions = [
            \ 'coc-marketplace',
            \ 'coc-calc', 'coc-cmake', 'coc-clangd', 'coc-html', 'coc-css',
            \ 'coc-pyright', 'coc-java', 'coc-json', 'coc-julia', 'coc-lua',
            \ 'coc-sh', 'coc-fish', 'coc-vimlsp', 'coc-sql', 'coc-svg',
            \ 'coc-tsserver', 'coc-yaml', 'coc-xml',
            \ 'coc-vimtex', 'coc-ultisnips']
let g:coc_config_home = $HOME . '/.vim/custom'
" auto show signature help
autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

" FusionTab %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:fusiontab_noexpand_after = {
            \ 'ultisnips' : ['(', '[', '{', '"', "'", '`'],
            \ 'coc' : [],
            \ }

" UltiSnips %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
set rtp+=~/.vim/custom
let g:UltiSnipsUsePythonVersion = 3
let g:UltiSnipsSnippetDirectories = ["Snips"]
let g:UltiSnipsEnableSnipMate = 0

" Defines a series of custom <Plug> keys for calling from function
let g:UltiSnipsExpandTrigger        = "<Plug>(ultisnips_expand)"
let g:UltiSnipsJumpForwardTrigger   = "<Plug>(ultisnips_expand)"
let g:UltiSnipsJumpBackwardTrigger  = "<Plug>(ultisnips_backward)"
let g:UltiSnipsListSnippets         = "<Plug>(ultisnips_list)"
let g:UltiSnipsRemoveSelectModeMappings = 0

let g:UltiSnipEditSplit = "normal"

" Airline %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#ale#enabled = 1                "ale support

if b:system == 'unix' || b:system == 'termux'
    let g:airline_powerline_fonts = 1
    let g:airline_left_sep = 'ÓÇ∞'
    let g:airline_left_alt_sep = 'ÓÇ±'
    let g:airline_right_sep = 'ÓÇ≤'
    let g:airline_right_alt_sep = 'ÓÇ≥'
    let g:airline_symbols = {}
    let g:airline_symbols.linenr = 'Œû'
else
    let g:airline_powerline_fonts = 0
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols = {}
    let g:airline_symbols.crypt = 'üîí'
    let g:airline_symbols.linenr = '‚êä'
    let g:airline_symbols.linenr = '‚ê§'
    let g:airline_symbols.maxlinenr = '‚ò∞'
    let g:airline_symbols.branch = '‚éá'
    let g:airline_symbols.paste = 'œÅ'
    let g:airline_symbols.spell = 'Íû®'
    let g:airline_symbols.notexists = '‚àÑ'
    let g:airline_symbols.whitespace = 'Œû'
endif
let g:airline#extensions#whitespace#enabled = 1

" Undo Tree %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:undotree_WindowLayout = 2
let g:undotree_ShortIndicators = 1
let g:undotree_HelpLine = 0

" Localvimrc %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:localvimrc_ask = 0    " Potentially dangerous but whatever

" Vim Indent-guides %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:indent_guides_auto_colors = 0
let g:indent_guides_color_change_percent = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
let g:indent_guides_default_mapping = 0
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = [
            \ 'help', 'nerdtree', 'vista', 'vista_kind' ]

" Vim-Minimap %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:minimap_show='<NOP>'
let g:minimap_update='<NOP>'
let g:minimap_close='<NOP>'
let g:minimap_toggle='<Leader>M'

" ALE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
"let g:ale_cursor_detail = 0    "show details when cursur over

let g:ale_sign_error = "‚úó‚úó"
let g:ale_sign_warning = "‚ö†"
let g:ale_sign_info = "üõà"
let g:ale_sign_style_error = "S‚úó"
let g:ale_sign_style_warning = "S‚Äº"

" For python, pyright is provided by coc, thus no need to specify here
let g:ale_linters = {
            \ 'c': ['cc', 'clang', 'gcc', 'cppcheck', 'clangcheck'],
            \ 'cpp': ['cc', 'clang', 'gcc', 'cppcheck', 'clangcheck'],
            \ 'javascript': ['eslint'],
            \ 'tex': ['chktex', 'lacheck'],
            \ 'python': ['mypy'],
            \ }
let g:ale_linter_aliases = {
            \ 'latex': 'tex'
            \ }

" C linter configs
let g:ale_c_cc_options = '-Wall -Wextra -std=c17'
let g:ale_c_gcc_options = '-Wall -Wextra -std=c17'
let g:ale_c_clang_options = '-Wall -Wextra -std=c17'
let g:ale_c_cppcheck_options = '--enable=all --inconclusive --std=c17'
let g:ale_c_clangcheck_options = '--extra-arg-before="--std=c17"'

" C++ linter configs
let g:ale_cpp_cc_options = '-Wall -Wextra -std=c++20'
let g:ale_cpp_gcc_options = '-Wall -Wextra -std=c++20'
let g:ale_cpp_clang_options = '-Wall -Wextra -std=c++20'
let g:ale_cpp_cppcheck_options = '--enable=all --inconclusive --std=c++20'
let g:ale_cpp_clangcheck_options = '--extra-arg-before="--std=c++20"'

" Python linter configs
let g:ale_python_mypy_options = '--ignore-missing-imports --python-executable=python'

" AutoPairs %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:AutoPairsSetKeymap = 0 " Let UltiSnips hadle paring, to get better experience
let g:AutoPairsShortcutFastWrap = '<C-e>'
let g:AutoPairsShortcutJump = '<NOP>'

" EasyMotion %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:EasyMotion_move_highlight = 0
let g:EasyMotion_do_mapping = 0 "disable default mapping to avoid conflict

" IncSearch %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:incsearch#auto_nohlsearch = 1
let g:incsearch#separate_highlight = 1
let g:incsearch#magic = '\v' " very magic, but do not cause probablility problem

" Vista.vim %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:vista_sidebar_width = 40
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#ctags = 'default'

let g:vista_ignore_kinds = ['Variable']

let g:vista#renderer#icons = {
            \ 'label': 'ÔÄ´ ',
            \ 'subsection': 'Óòí ',
            \ 'section': 'Óòí ',
            \ 'subsubsection': 'Óòí '
            \ }

" Use ctags by default, for some filetypes, use coc
let g:vista_executive_for = {
            \ 'yaml': 'coc',
            \ 'python': 'coc',
            \ 'c': 'coc',
            \ 'cpp': 'coc',
            \ }

" AnyFold %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
filetype plugin indent on   " required
syntax on                   " required
"let g:anyfold_activate = 1 " deprecated, use autocmd instead
let g:anyfold_identify_comments = 0
let g:anyfold_fold_toplevel = 0
let g:anyfold_identify_comments = 1
set foldmethod=syntax
set foldlevel=0
set foldlevelstart=10

" enable anyfold by default
augroup AnyFold
    autocmd!
    autocmd Filetype * AnyFoldActivate
augroup END

" disable anyfold for large files
let g:LargeFile = 1000000 " file is large if size greater than 1MB
autocmd BufReadPre,BufRead * let f=getfsize(expand("<afile>")) |
            \ if f > g:LargeFile || f == -2 | call LargeFile() | endif
function LargeFile()
    augroup anyfold
        autocmd!
        autocmd Filetype * set foldmethod=indent " fall back to indent folding
    augroup END
endfunction

" Context.vim %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:context_enabled = 1
let g:context_filetype_blacklist = []
let g:context_add_mappings = 0
let g:context_add_autocmds = 1
let g:context_ellipsis_char = '¬∑'
let g:context_border_char = '‚îÅ' "'‚îÄ'
let g:context_highlight_border = 'Comment'
let g:context_highlight_tag = '<hide>'
" let g:context_nvim_no_redraw = 1 " lazy update, may cause some issue
" Use float/popup by defalut to avoid switching to contet window
"let g:context_presenter =

" Rainbow Parentheses %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

" Vim-Signature %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:SignatureMarkTextHLDynamic = 1
let g:SignaturePurgeConfirmation = 1

" Doxygen Toolkit %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:DoxygenToolkit_commentType = "C++"

" CtrlSF %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:ctrlsf_mapping = {
            \ "open"    : ["<CR>", "o"],
            \ "openb"   : "O",
            \ "split"   : "<C-O>",
            \ "vsplit"  : "",
            \ "tab"     : "t",
            \ "tabb"    : "T",
            \ "popen"   : "p",
            \ "popenf"  : "P",
            \ "quit"    : "q",
            \ "next"    : "<C-J>",
            \ "prev"    : "<C-K>",
            \ "pquit"   : "q",
            \ "loclist" : "",
            \ "chgmode" : "M",
            \ }
let g:ctrlsf_auto_close = {
            \ "normal" : 1,
            \ "compact": 1
            \ }
let g:ctrlsf_auto_focus = {
            \ "at" : "start"
            \ }
let g:ctrlsf_default_view_mode = 'normal'
" default 'ag' > 'ack' > 'rg' > 'pt' > 'ack-grep'
" let g:ctrlsf_ackprg = '/usr/bin/ag'

" Vim-GutenTags %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:gutentags_project_root = ['.git', '.svn', '.hg', '.project']

if b:system == 'windows'
    let s:vim_tags = expand($temp . '/vim')
elseif b:system == 'termux'
    let s:vim_tags = s:termux_prefix . '/tmp/vim'
else
    let s:vim_tags = expand('/tmp/vim')
endif

if !isdirectory(s:vim_tags)
    silent! call mkdir(s:vim_tags, 'p')
endif

let g:gutentags_ctags_extra_args = [
            \ '--tag-relative=yes',
            \ '--fields=+ailmnS',
            \ ]
" let g:gutentags_modules = [ 'ctags', 'gtags_cscope' ]
let g:gutentags_modules = [ 'ctags' ]
let g:gutentags_cache_dir = s:vim_tags.'/.LfCache/gtags'
" exclude unneded directories from ctags
let g:gutentags_ctags_exclude = [ '*/data/*', '*/log/*' ]

" GutenTags-Plus %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" change focus to quickfix window after search
let g:gutentags_plus_switch = 1
" disable keymaps
let g:gutentags_plus_nomap = 1

" LeaderF %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:Lf_ShortcutF = '<Leader>f'
let g:Lf_ShortcutB = '<Leader>b'

" gtag support
let g:Lf_RootMarkers = ['.git', '.hg', '.svn', '.project']
let g:Lf_WorkingDirectoryMode = 'Ac'

" vim-gutentags comatibility
let g:Lf_CacheDirectory = s:vim_tags
" let g:Lf_GtagsAutoGenerate = 0
" let g:Lf_GtagsGutentags = 1

let g:Lf_GtagsAutoGenerate = 1
let g:Lf_GtagsGutentags = 0
let g:Lf_GtagsAutoUpdate = 1
" 0 - gtags search the target files by itself.
" 1 - the target files come from FileExplorer.
" 2 - the target files come from g:Lf_GtagsfilesCmd.
let g:Lf_GtagsSource = 2
let g:Lf_GtagsfilesCmd = {
    \ '.git': 'git ls-files --recurse-submodules',
    \ '.hg': 'hg files',
    \ 'default': 'find . -regextype egrep -iregex ' .
    \    '".*\.(cmake|h|c|cc|hh|hpp|cpp|py|java|js|hs)"'
    \ }
let g:Lf_GtagsSkipUnreadable = 1

"let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 0

let g:Lf_WindowPosition = 'bottom'  "top/left/right/popup
let g:Lf_WindowHeight = 0.30
let g:Lf_StlSeparator = { 'left': 'ÓÇ∞', 'right': 'ÓÇ≤' }
let g:Lf_SpinSymbols = ['üåò', 'üåó', 'üåñ', 'üåï', 'üåî', 'üåì', 'üåí', 'üåë']

" Instant-markdown %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0
let g:instant_markdown_allow_unsafe_content = 1
let g:instant_markdown_allow_external_content = 1
let g:instant_markdown_mathjax = 1

" AutoFormat %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" disable fallback to vim indent
let g:autoformat_autoindent = 0
let g:formatdef_clang = '"clang-format -style=file --assume-filename=".expand("%:t")'
let g:formatters_c = ['clang']
let g:formatters_cpp = ['clang']
let g:formatters_cuda = ['clang']
let g:formatters_haskell = ['stylish-haskell']
let g:formatters_bash = ['shfmt']

let g:formatters_python = ['autopep8']
let g:formatdef_black = '"black --quiet --line-length 79 -"'
let g:formatdef_yapf = '"yapf --style " . $HOME . "/.vim/custom/yapf.conf"'

let g:formatters_tex = ['latexindent']
let g:formatdef_latexindent = '"latexindent -l=" . $HOME . "/.vim/custom/latex_indentconfig.yaml -g /dev/null - 2>/dev/null"'

" VimTex %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:vimtex_doc_handlers = ['VimTexDocHandler']
let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
" deprecated
" let g:vimtex_view_general_options_latexmk = '--unique'

" disable all mappings, to avoid conflict with other plugins
let g:vimtex_mappings_enabled = 0
let g:vimtex_imaps_enabled = 0
let g:tex_flavor = 'latex'

" disable indent in tabular/aligned environments. (undesired most of the time)
let g:vimtex_indent_on_ampersands = 0

" see https://github.com/lervag/vimtex/issues/585, for better log parsing and
" more correct quickfix jumping location. requires pplatex.
if executable('pplatex')
    let g:vimtex_quickfix_method = 'pplatex'
endif
let g:vimtex_quickfix_autoclose_after_keystrokes = 3

" add `vim --remote-silent +%l '%f'` to
" Okular > Settings > Configure Okular > Editor > Command
" And set `Editor` to `Custom Text Editor`
" Then in okular _normal node_, use `Shift + Click` to do reverse search

" let 'backend' be automatically detected here
let g:vimtex_compiler_latexmk = {
            \ 'background' : 1,
            \ 'build_dir' : 'output',
            \ 'callback' : 1,
            \ 'continuous' : 1,
            \ 'executable' : 'latexmk',
            \ 'options' : [
            \   '-verbose',
            \   '-synctex=1',
            \   '-file-line-error',
            \   '-interaction=nonstopmode',
            \ ],
            \}
let $TEXMFHOME = $HOME . '/texmf'

" Tex-Conceal %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:tex_conceal="abdgm"

" Bash-Support %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:BASH_InsertFileHeader='no'
let g:BASH_Executable='bash'
let g:BASH_Debugger='ddd'
let g:BASH_LoadMenus='no'

" Vim-Grammarous %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" use system langaugetool
let g:grammarous#languagetool_cmd = 'languagetool'

" Vim-Fish %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
autocmd FileType fish compiler fish
autocmd FileType fish setlocal textwidth=80
autocmd FileType fish setlocal foldmethod=expr

" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" Vim Native Settings %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
" %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if b:system == 'unix'
    set shell=/bin/bash
elseif b:system == 'termux'
    set shell=/data/data/com.termux/files/usr/bin/bash
endif

" this option is neither nvim compatible nor fbterm compatible
if !has('nvim') && !$TERM == 'fbterm'
    set term=screen-256color
endif

" Appearence %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if has('gui_running')
    if b:system == 'windows'
        set guifont=FuraCode\ NF:h14,Fira\ Code,monospace
    else
        set guifont=Fira\ Code\ 14,monospace
    endif
    set guioptions=
endif

colo wombat256
set cursorline
"set cursorcolumn
set number
set relativenumber
set hlsearch
set fillchars+=vert:‚îÇ
set colorcolumn=80
" always show the status line
set laststatus=2
" search when you type
set incsearch
" auto reload file after changed externally
set autoread

" load the doxygen syntax and use enhanced highlight
let g:load_doxygen_syntax = 1
"let g:doxygen_enhanced_color = 1

" determine current window class and set cursor shape accordingly
if b:system == 'unix' && g:preset == 'desktop'
    call system("xset -q")
    if v:shell_error == 0 && !empty(system('command -v xprop'))
        let curWindowClass = system("xprop -id $(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5) WM_CLASS")
        if stridx(curWindowClass, '"Xfce4-terminal"') != -1
            " Altering ~/.config/xfce4/terminal/temrinalrc works
            " but performs badly, so just ignore it.
        else
            " most modern terminal emulators are VTE-compatible
            let &t_SI = "\<Esc>[6 q"
            let &t_SR = "\<Esc>[4 q"
            let &t_EI = "\<Esc>[2 q"
        endif
    endif
endif


" Behavior %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
syntax enable
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set wildmode=longest:full,full
set wildmenu
set showmode
set conceallevel=2

set fileencodings=utf8,cp936,gb18030,big5
set cinoptions=>s,e0,n0,f0,{0,}0,^0,Ls,:s,=s,l0,b0,g0,hs,N-s,E0,ps,t0,is,+s,c3,C0,/0,(2s,us,U0,w0,W0,k0,m0,j0,J0,)20,*70,#0
set backspace=indent,eol,start

" always open help in new tab
cabbrev h tab help

" disable annoying beeping in windows
if has('win32')
    set noerrorbells visualbell t_vb=
endif

" turn off syntax for diff mode only
if &diff
    syntax off
    set wrap
else
    syntax on
endif

" turn on english grammar checking for some file type
autocmd FileType tex,markdown,text set spell
set spelllang=en_us,cjk

" autoremove trailing whitespace when saving
autocmd BufWritePre * %s/\s\+$//e

" search ctags in parent dir if not found
set tag=./.tags;,.tags;

" autodetect filetype
autocmd BufRead,BufNewFile *.ASM setlocal filetype=asm
autocmd BufRead,BufNewFile *.g setlocal filetype=antlr3
autocmd BufRead,BufNewFile *.g4 setlocal filetype=antlr4
autocmd BufRead,BufNewFile *.fl,*.flex,*.l,*.lm,*.lpp setlocal filetype=lex
autocmd BufRead,BufNewFile *.y,*.ypp,*.ym setlocal filetype=yacc
filetype plugin on

" Start a remote server by default,
" so that some plugin will work correctly (like vimtex reverse-search)
if b:system == 'unix'
    call system("xset -q")
    if v:shell_error == 0 &&
                \ has('clientserver') &&
                \ empty(v:servername) &&
                \ exists('*remote_startserver')
        call remote_startserver('VIM')
    endif
endif

" Key Mappings %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
let g:mapleader = ';'
let g:maplocalleader = ';'
nnoremap <Leader><Leader> :

if b:system == 'windows'
    inoremap <C-S-v> <C-r>*<CR>
endif

" toggle paste mode
set pastetoggle=<F1>

" nerdTree toggle
nnoremap <C-n> :NERDTreeTabsToggle<CR>

" tagbar toggle
" nnoremap <C-t> :TagbarToggle<CR>

" vista toggle and search
nnoremap <C-t> :Vista!!<CR>
autocmd FileType vista,vista_kind nnoremap <buffer> <silent> / :<c-u>call vista#finder#fzf#Run()<CR>

" context.vim toggle
nnoremap <C-c> :ContextToggle<CR>

" identGuide Show
"nnoremap <C-\> <Plug>IndentGuidesToggle


" DoxygenToolKit nnoremap
nnoremap <S-m> :Dox<CR>

" agit show
nnoremap <C-g> :Agit<CR>

" Fix Syntax error
inoremap <C-s> <C-g>u<Esc>[s1z=`]a<C-g>u

" file finder
nnoremap <C-f> :e .<CR>

" undo tree toggle
nnoremap <Leader>u :UndotreeToggle<CR>

" easy-align map
nmap <Leader>a <Plug>(EasyAlign)
xmap <Leader>a <Plug>(EasyAlign)

" CtrlSF quick search
nmap <Leader>/ <Plug>CtrlSFPrompt
nmap <Leader>? <Plug>CtrlSFCCwordPath

" rainbow parentheses toggle
nnoremap <F9> :RainbowParenthesesLoadRound<CR>
            \:RainbowParenthesesLoadSquare<CR>
            \:RainbowParenthesesLoadBraces<CR>
            \:RainbowParenthesesLoadChevrons<CR>
nnoremap <F10> :RainbowParenthesesToggle<CR>

" tab operation
nnoremap <S-l> :tabn<CR>
nnoremap <S-h> :tabp<CR>
nnoremap <C-S-l> :tabm+1<CR>
nnoremap <C-S-h> :tabm-1<CR>
nnoremap <F4> <C-w>T
nnoremap <F2> :tabnew<CR>
nnoremap <F3> :tabclose<CR>

" LeaderF map
nmap <Leader>js <Plug>LeaderfGtagsSymbol
nmap <Leader>jj <Plug>LeaderfGtagsGrep
nmap <leader>jR <Plug>LeaderfGtagsReference
nmap <Leader>m :LeaderfMarks<CR>

" use coc for jumps, replaces YouCompleteMe jumps and LeaderF jumps
nmap <Leader>rr <Plug>(coc-refactor)
nmap <Leader>jr <Plug>(coc-references)
nmap <Leader>jd <Plug>(coc-definition)
nmap <Leader>jD <Plug>(coc-declaration)

" Coc Map, S-j, S-k for scroll, C-j, C-k for menu scroll
" use Tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <S-j> pumvisible() ? "\<C-n>" : "\<S-j>"
inoremap <silent><expr> <S-k> pumvisible() ? "\<C-p>" : "\<S-k>"

if has('nvim')
    inoremap <silent><expr> <C-Space> coc#refresh()
else
    inoremap <silent> <C-@> <C-r>=coc#refresh()<CR>
endif
inoremap <silent><nowait><expr> <C-j> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<CR>" : "\<C-j>"
inoremap <silent><nowait><expr> <C-k> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<CR>" : "\<C-k>"
vnoremap <silent><nowait><expr> <C-j> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-j>"
vnoremap <silent><nowait><expr> <C-k> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-k>"
nnoremap <silent><nowait><expr> <C-j> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-j>"
nnoremap <silent><nowait><expr> <C-k> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-k>"

" ctag goto definition/declaration
nnoremap <Leader><C-]> <C-w><C-]><C-w>T

" incsearch map
nmap n  <Plug>(incsearch-nohl-n)
nmap N  <Plug>(incsearch-nohl-N)
nmap *  <Plug>(incsearch-nohl-*)
nmap #  <Plug>(incsearch-nohl-#)
nmap g* <Plug>(incsearch-nohl-g*)
nmap g# <Plug>(incsearch-nohl-g#)
nmap /  <Plug>(incsearch-forward)
nmap ?  <Plug>(incsearch-backward)
nmap g/ <Plug>(incsearch-stay)

" easymotion
nmap <Leader>  <Plug>(easymotion-prefix)
nmap <Leader>s <Plug>(incsearch-nohl)<Plug>(easymotion-sn)
nmap <Leader>S <Plug>(incsearch-nohl)<Plug>(easymotion-s)

" vimtex
autocmd Filetype tex        nmap <C-Q> <plug>(vimtex-doc-package)
autocmd Filetype tex        nmap <Leader>h <plug>(vimtex-view)

" auto highlight toggle
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>

" document query, requires zeal
autocmd Filetype c          nnoremap <silent> <C-Q> :!command -v zeal && zeal "c:<cword>"          > /dev/null 2>&1 &<CR><CR>
autocmd Filetype cpp        nnoremap <silent> <C-Q> :!command -v zeal && zeal "cpp:<cword>"        > /dev/null 2>&1 &<CR><CR>
autocmd Filetype python     nnoremap <silent> <C-Q> :!command -v zeal && zeal "python:<cword>"     > /dev/null 2>&1 &<CR><CR>
autocmd Filetype html       nnoremap <silent> <C-Q> :!command -v zeal && zeal "html:<cword>"       > /dev/null 2>&1 &<CR><CR>
autocmd Filetype javascript nnoremap <silent> <C-Q> :!command -v zeal && zeal "javascript:<cword>" > /dev/null 2>&1 &<CR><CR>

" dictionary query, requires qstardict
nnoremap <S-Q> :!command -v qstardict && qstardict <cword> > /dev/null 2>&1 &<CR><CR>

" Commands %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
command! Gdb ConqueGdb
"command! MarkdownToggle InstantMarkdownPreview
command! MarkdownView InstantMarkdownPreview
command! MarkdownStop InstantMarkdownStop
command! AutoHighlightToggle :call AutoHighlightToggle()
command! AF Autoformat
command! -nargs=* Make make <args> | cwindow             "open quickfix after make automatically
command! Todo noautocmd CtrlSF -C 0 -R TODO|FIXME|NOTE **
command! HighlightSync syntax sync fromstart

" Functions %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

" Auto highlight toggle
function! AutoHighlightToggle()
    let @/ = ''
    if exists('#auto_highlight')
        au! auto_highlight
        augroup! auto_highlight
        setl updatetime=4000
        echo 'Highlight current word: off'
        return 0
    else
        augroup auto_highlight
            au!
            au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
        augroup end
        setl updatetime=500
        echo 'Highlight current word: ON'
        return 1
    endif
endfunction

" Auto fcitx toggle
if b:system == 'unix'
    let g:input_toggle = 0
    let s:fcitx_remote_cmd = ""
    if executable("fcitx-remote")
        let s:fcitx_remote_cmd = "fcitx-remote"
    elseif executable("fcitx5-remote")
        let s:fcitx_remote_cmd = "fcitx5-remote"
    endif

    if s:fcitx_remote_cmd
        " toggle to en when exit insert move
        function! Fcitx2en()
            let s:input_status = system(s:fcitx_remote_cmd)
            echom s:input_status
            if s:input_status == 2
                let g:input_toggle = 1
                let l:a = system(s:fcitx_remote_cmd . " -c")
            endif
        endfunction

        " toggle to cn when enter insert mode
        function! Fcitx2zh()
            let s:input_status = system(s:fcitx_remote_cmd)
            if s:input_status != 2 && g:input_toggle == 1
                let l:a = system(s:fcitx_remote_cmd . " -o")
                let g:input_toggle = 0
            endif
        endfunction

        set ttimeoutlen=100
        "exit insert mode
        autocmd InsertLeave * call Fcitx2en()
        "enter insert mode
        autocmd InsertEnter * call Fcitx2zh()
    endif
endif

" vimtex handler
function! VimTexDocHandler(context)
    call vimtex#doc#make_selection(a:context)
    if !empty(a:context.selected)
        execute '!texdoc' a:context.selected '&'
    endif
    return 1
endfunction

" redirect vim internal pager
function! Redir(cmd, rng, start, end)
    for win in range(1, winnr('$'))
        if getwinvar(win, 'scratch')
            execute win . 'windo close'
        endif
    endfor
    if a:cmd =~ '^!'
        let cmd = a:cmd =~' %'
                    \ ? matchstr(substitute(a:cmd, ' %', ' ' . expand('%:p'), ''), '^!\zs.*')
                    \ : matchstr(a:cmd, '^!\zs.*')
        if a:rng == 0
            let output = systemlist(cmd)
        else
            let joined_lines = join(getline(a:start, a:end), '\n')
            let cleaned_lines = substitute(shellescape(joined_lines), "'\\\\''", "\\\\'", 'g')
            let output = systemlist(cmd . " <<< $" . cleaned_lines)
        endif
    else
        redir => output
        execute a:cmd
        redir END
        let output = split(output, "\n")
    endif
    vnew
    let w:scratch = 1
    setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile
    call setline(1, output)
endfunction
command! -nargs=1 -complete=command -bar -range Redir silent call Redir(<q-args>, <range>, <line1>, <line2>)
